1
00:00:00,000 --> 00:00:06,000
One special behavior that I need to point out about value types is that value types are typically immutable,

2
00:00:06,000 --> 00:00:12,000
which means they cannot change, and certainly the value types that Microsoft provides as primitives for us to

3
00:00:12,000 --> 00:00:17,000
work with from the .NET Framewrk, those value types are immutable, and that means that once you create a

4
00:00:17,000 --> 00:00:23,000
value you cannot change the value. That doesn't mean that the value stored in a variable cannot change.

5
00:00:23,000 --> 00:00:29,000
We call them variables because the data inside can vary, but the actual value of the value type cannot change.

6
00:00:29,000 --> 00:00:36,000
So for example you cannot change the value of the integer value 4, that seems obvious, but it also means that

7
00:00:36,000 --> 00:00:41,000
once you've constructed a DateTime, which is a value type, that particular value cannot change.

8
00:00:41,000 --> 00:00:48,000
So with this in mind I want to cover two common errors that new C# developers frequently run into,

9
00:00:48,000 --> 00:00:51,000
one error with a DateTime value type, and one error with a string type.

10
00:00:51,000 --> 00:00:56,000
Once you construct a DataTime, and yes, you can use the new operator, you can construct a DateTime,

11
00:00:56,000 --> 00:01:02,000
and set that DateTime value to August 11, of the year 2002, which is what the code on the screen is doing.

12
00:01:02,000 --> 00:01:06,000
That's because the DateTime constructor takes the year, the month, and the day.

13
00:01:06,000 --> 00:01:12,000
Once I create this value I cannot change it, I can assign a different value into that date variable even

14
00:01:12,000 --> 00:01:18,000
though the DateTime exposes members like AddDays, which makes it look like I can add one day to an existing

15
00:01:18,000 --> 00:01:24,000
DateTime value, but this code has a problem because AddDays will never change the underlying DateTime value.

16
00:01:24,000 --> 00:01:32,000
Instead what AddDays will do is return a new DateTime instance, so I need to assign the return value of

17
00:01:32,000 --> 00:01:37,000
AddDays into a variable if I really want to capture the date. The string type in .NET also has these qualities.

18
00:01:37,000 --> 00:01:43,000
What's interesting about string is that string is a reference type, and as I said before, don't let anyone

19
00:01:43,000 --> 00:01:49,000
tell you that string is not a reference type. When working with strings your variables will be a reference

20
00:01:49,000 --> 00:01:53,000
that point to a sequence of characters, and that makes it easy to pass strings around to different methods

21
00:01:53,000 --> 00:01:59,000
because we pass a reference instead of copying the entire value of the string, and that's good because

22
00:01:59,000 --> 00:02:03,000
strings can contain millions of characters and can be quite large.

23
00:02:03,000 --> 00:02:09,000
A string is a reference type then, but it behaves like a value type in many ways because a string is immutable.

24
00:02:09,000 --> 00:02:15,000
One of the methods on a string is a Trim method. What Trim will do is remove the leading or trailing white

25
00:02:15,000 --> 00:02:20,000
space from a string, so the space characters before it and after the value Scott should be removed,

26
00:02:20,000 --> 00:02:26,000
but Trim does not modify the string that I am pointing to, instead Trim will create a new string with the

27
00:02:26,000 --> 00:02:31,000
characters removed, and return that new string. If all I do is just call Trim, and I don't assign the return

28
00:02:31,000 --> 00:02:37,000
value of that method call to a variable, I've lost all the work that the Trim method performed, and so the

29
00:02:37,000 --> 00:02:44,000
code on the screen is all wrong, don't use it, instead use the code that I'll show you now.

30
00:02:44,000 --> 00:02:49,000
Inside of Visual Studio let's experiment with the code that was just on the slide, so first I will write a

31
00:02:49,000 --> 00:02:56,000
new test method, this test method will test how to add days to a DateTime.

32
00:02:56,000 --> 00:03:02,000
So first I will need a DateTime variable, let's just call it date, and I could assign to that variable

33
00:03:02,000 --> 00:03:08,000
DateTime.Now, we've seen that earlier in the course, that will give me the current time as this program is

34
00:03:08,000 --> 00:03:14,000
executing, but instead let's use a specific date. I can do that using the new keyword, and there is a

35
00:03:14,000 --> 00:03:21,000
constructor for DateTime where I can pass in the year, let's say 2015, and then the month, let's just use

36
00:03:21,000 --> 00:03:27,000
January, and then the day of the month, let's just use the first day, and there's also constructors that

37
00:03:27,000 --> 00:03:32,000
would allow me to construct that day with a specific time during the day, but let's go with that value,

38
00:03:32,000 --> 00:03:40,000
and now say DateTime.AddDays1, and like I say it's very easy to think that now you have a DateTime that

39
00:03:40,000 --> 00:03:48,000
represents January 2, but if I write an assert, and I try to assert that the following two things are equal,

40
00:03:48,000 --> 00:03:55,000
the value 2, and date.Day, I will find this test will fail. Before I do that I'll just point out that

41
00:03:55,000 --> 00:04:00,000
there's all sorts of ways to look at various different pieces of the date, I could look at the specific hour,

42
00:04:00,000 --> 00:04:09,000
or the specific millisecond, but I just want to look at the day, and if I run the test the failing test will

43
00:04:09,000 --> 00:04:16,000
tell me that I expected a 2, but the actual value is 1, so Date.Day is still a 1, and that's because AddDays

44
00:04:16,000 --> 00:04:24,000
will construct a new DateTime, so let me assign that new DateTime into the date variable, and run the test

45
00:04:24,000 --> 00:04:31,000
again, and now we have a passing test. Next let's try something with a string, so another test method,

46
00:04:31,000 --> 00:04:41,000
and let's test how to uppercase a string. So if I have a string variable, let's call it name, and I point it

47
00:04:41,000 --> 00:04:47,000
to the string scott, with all lowercase characters, and yes, I do point it to that string value because if I

48
00:04:47,000 --> 00:04:54,000
press F12 on string I do see that it is a class defined inside of MSCorLib, and you'll notice the class name

49
00:04:54,000 --> 00:05:00,000
is actually uppercase S, it just so happens that once again C# provides a magic keyword, string with a

50
00:05:00,000 --> 00:05:05,000
lowercase letter, that will map to that stystem.stringtype, so the two are equivalent.

51
00:05:05,000 --> 00:05:11,000
C# is a case sensitive language, so if I didn't have that keyword in C# I would have to stay String uppercase

52
00:05:11,000 --> 00:05:15,000
S, but now that we know that let's try to do something with our name.

53
00:05:15,000 --> 00:05:23,000
Ultimately what I want to do is invoke a ToUpper method, which is one of many methods on the string type that

54
00:05:23,000 --> 00:05:29,000
looks like it would change the underlying string, so you can Trim a string, you can Trim from the start,

55
00:05:29,000 --> 00:05:37,000
or Trim just from the end. You can say ToUpper, ToLower, but if I write an assertion here, and try to assert

56
00:05:37,000 --> 00:05:44,000
that the value I expect is SCOTT, all uppercase, and compare that to the actual value, which is the value

57
00:05:44,000 --> 00:05:53,000
in name, if I run this test I will find that it fails because even though string is a reference type,

58
00:05:53,000 --> 00:05:58,000
it behaves very much like a value type, and I can see that I expected an all uppercase SCOTT, but I actually

59
00:05:58,000 --> 00:06:03,000
got an all lowercase scott, and that's because all of these methods like Trim, and ToUpper, and ToLower,

60
00:06:03,000 --> 00:06:10,000
they don't modify the string that I'm pointing to, instead they create a new string, and return that string

61
00:06:10,000 --> 00:06:15,000
from the method, so I really need to capture that by assigning a reference to that new string back into my

62
00:06:15,000 --> 00:06:22,000
name variable, and once I do that, and I run all the tests I should find that this passes, which it does,

63
00:06:22,000 --> 00:06:26,000
and hopefully this will save you some time in the future. Always remember when working with a value type

64
00:06:26,000 --> 00:06:31,000
that the value type might be immutable, but methods you see on that value type might be methods that return a

65
00:06:31,000 --> 00:06:37,000
new value or a new instance, and not change the underlying value, and that rule also applies to string,

66
00:06:37,000 --> 00:59:00,000
which behaves like a value type.

