1
00:00:01,000 --> 00:00:07,000
One way to create a value type with C# is to create a structure using the struct keyword.

2
00:00:07,000 --> 00:00:12,000
A struct definition looks just like a class definition. A struct has a name, it has an opening and a closing

3
00:00:12,000 --> 00:00:16,000
curly brace, and everything inside of those braces will be a member of the structure.

4
00:00:16,000 --> 00:00:23,000
You can even apply an access modifier like public or internal, really the only syntactical difference is the

5
00:00:23,000 --> 00:00:28,000
keyword that's being used, struct or class, which leads to the next obvious question, when should I write a

6
00:00:28,000 --> 00:00:32,000
struct, and when should I write a class. The general rule of thumb is that you want to write a class by default.

7
00:00:32,000 --> 00:00:37,000
Structs are meant for special cases when you need to write an abstraction that represents a single value,

8
00:00:37,000 --> 00:00:43,000
like a DateTime that is inside of the .NET Framework that represents a single value even though you can break

9
00:00:43,000 --> 00:00:49,000
a DateTime down into small constituent pieces like the current hour, or the current day, or the current year,

10
00:00:49,000 --> 00:00:54,000
a DateTime does represent something that we can reason about as a single value, and it's a value that

11
00:00:54,000 --> 00:01:01,000
represents a point in time. Other value types in the .NET Framework, types like int, very obviously hold

12
00:01:01,000 --> 00:01:05,000
only a single value, but over the years I've built many custom value types using struct, and I've done this

13
00:01:05,000 --> 00:01:12,000
to represent things like complex numbers, or a point in two or three demential space, or a currency amount,

14
00:01:12,000 --> 00:01:18,000
which consists of a monetary value and a currency symbol, all of those abstractions represent single values

15
00:01:18,000 --> 00:01:23,000
conceptually, and the other characteristic that those value types have in common is that they are all small.

16
00:01:23,000 --> 00:01:29,000
Structs do best when they contain a small amount of data because as we'll see value types get copied around in memory frequently.

17
00:01:29,000 --> 00:01:36,000
A value type like int in C#, that not only requires 4 bytes of data to store, and most CPUs will copy that data

18
00:01:36,000 --> 00:01:45,000
just using a single CPU cycle, but more on that later. Another way to create a value type in C# is to use the enum keyword.

19
00:01:45,000 --> 00:01:48,000
An enum creates a type that will only hold specific numerical values.

20
00:01:48,000 --> 00:01:54,000
An enum, which is short for enumeration, and it's a good way to create named constants in your software.

21
00:01:54,000 --> 00:02:01,000
So here's a scenario, let's say we're building an application to pay employees, and we already have an employee class.

22
00:02:01,000 --> 00:02:06,000
One attribute we need to tract for each employee is how they are paid, are they paid on an hourly basis,

23
00:02:06,000 --> 00:02:12,000
are they salaried, are they an executive, one way to represent those categories would be to give each

24
00:02:12,000 --> 00:02:19,000
category a number, so an hourly employee has a payroll type of 4, and a salaried employee has a payroll type of 2.

25
00:02:19,000 --> 00:02:24,000
The problem is if we actually use those numbers in our source code they become what we call magic numbers.

26
00:02:24,000 --> 00:02:30,000
You look at the source code and you see a 2, what does that represent, is that employee hourly or salaried,

27
00:02:30,000 --> 00:02:34,000
I'm not sure, those are the types of things that you forget about 24 hours after you write the code.

28
00:02:34,000 --> 00:02:40,000
An enum can turn those magical numbers into symbols, so instead of using the value 4 for an hourly employee,

29
00:02:40,000 --> 00:02:47,000
I can use the code Payroll.Type.Hourly, so an enum isn't something that I have to instantiate to use,

30
00:02:47,000 --> 00:02:52,000
I can just use the name of the enum, and then one of the members of the enum that I have defined like

31
00:02:52,000 --> 00:02:58,000
.constractor, .salaried, and so forth. So in the if statement we're looking at using an employee object,

32
00:02:58,000 --> 00:03:06,000
every employee object has a field named Role that is defined of type PayrollType, so instead of saying

33
00:03:06,000 --> 00:03:10,000
.Role=2 or .Role=3, I can involve this enum, and the code is a little bit clear.

34
00:03:10,000 --> 00:03:16,000
Defining an enum is very simple, you use the enum keyword, give the enum a name, there's an opening and

35
00:03:16,000 --> 00:03:21,000
closing curly brace just like a class, but what is inside are your symbols.

36
00:03:21,000 --> 00:03:27,000
Here we have Contractor, Salaried, Executive, and Hourly. By default the first entry in an enum will carry

37
00:03:27,000 --> 00:03:34,000
the value 0 because behind the scenes this enum is represented as an integer value like 1, or 2, or 3.

38
00:03:34,000 --> 00:03:39,000
Inside the enum you can explicitly assign values as we've done here when we say Contractor = 1.

39
00:03:39,000 --> 00:03:45,000
What the C# complier will do is automatically assign the next numerical value if I don't explicitly provide

40
00:03:45,000 --> 00:03:52,000
one, so Salaried would be a 2, Executive would be a 3, Hourly would be a 4, and this code we'll just use the

41
00:03:52,000 --> 00:03:58,000
defaults there, but we could've explicitly overwritten that and said hourly = 128 if we wanted to.

42
00:03:58,000 --> 00:04:01,000
Let's take a look at this in code.

43
00:04:01,000 --> 00:04:06,000
In Visual Studio let me first show you an easy way to figure out if you're working with a reference type or a value type.

44
00:04:06,000 --> 00:04:12,000
When I declare a variable like g1, which is of type GradeBook, how do I know that's a reference type?

45
00:04:12,000 --> 00:04:18,000
One way to do this is to put the curse on the GradeBook symbol and use the F12 key, we've used this before,

46
00:04:18,000 --> 00:04:23,000
that will take me to the source code if Visual Studio has the source code available, and when I come to the

47
00:04:23,000 --> 00:04:29,000
source code for GradeBook I can see it's defined as a class, therefore this is a reference type, and g1 will hold a pointer.

48
00:04:29,000 --> 00:04:35,000
What about integers? I can use the same trick here. I can press F12, integer is part of the .NET Framework,

49
00:04:35,000 --> 00:04:41,000
but what Visual Studio will do is recreate the structure of that type from metadata, so this is the metadata

50
00:04:41,000 --> 00:04:46,000
view we used this earlier in the course. We can see that his is part of MSCorLib.

51
00:04:46,000 --> 00:04:51,000
So that's where the int type lives. Now you'll notice the actual name of this type is system.In32,

52
00:04:51,000 --> 00:04:59,000
it's not int, and that's just because in C# int is a C# keyword that will give you an in32, so I could define

53
00:04:59,000 --> 00:05:07,000
these variables using either the C# keyword int or the type system.in32, it's all going to come out the same

54
00:05:07,000 --> 00:05:13,000
in the end, those two are completely equivalent. I prefer to use the C# keyword int, but you can see here

55
00:05:13,000 --> 00:05:20,000
that int, AKA an in32, it is a struct, therefore an int is a value type.

56
00:05:20,000 --> 00:05:24,000
If I looked at the DateTime type in .NET I would see it as also a struct, and this metadata view, by the way,

57
00:05:24,000 --> 00:05:30,000
can be very useful if you're trying to figure out what something can do for you, I can look at this in32

58
00:05:30,000 --> 00:05:35,000
type, and I can see that I can convert an int to a string, I can compare integer values, I can parse an

59
00:05:35,000 --> 00:05:39,000
integer out of a string, we will look at some of those features later in the course.

60
00:05:39,000 --> 00:05:46,000
For right now I'd also like to show you how to write or use an enum that's built-in to the .NET Framework,

61
00:05:46,000 --> 00:05:52,000
so let me create a new test method. This time what we're going to be experimenting with is StringComparisons.

62
00:05:52,000 --> 00:05:59,000
So first I'll declare a variable, let's call it name1, and it's going to point to value Scott with an uppercase S.

63
00:05:59,000 --> 00:06:05,000
So is string a value type or a reference type in .NET? If I press F12 I can see clearly that string is a

64
00:06:05,000 --> 00:06:11,000
reference type, don't let anyone ever tell you anything different, however string is a little bit magical,

65
00:06:11,000 --> 00:06:17,000
and we'll talk about that later in this module. So string is a reference type, name1 points to the string Scott.

66
00:06:17,000 --> 00:06:25,000
Let me also declare name 2, and I want this to point to scott, but without an uppercase S, and now what I'd

67
00:06:25,000 --> 00:06:30,000
like to do is do a StringComparison that will tell me these two strings are equivalent, so I need to do a

68
00:06:30,000 --> 00:06:36,000
StringComparison that ignores the case of the individual characters, so an uppercase S should be equivalent

69
00:06:36,000 --> 00:06:42,000
to a lowercase S. Let me declare another variable of type bool, so we can hold the value true or false.

70
00:06:42,000 --> 00:06:51,000
What is bool by the way? Bool, also a value type, it's a struct. I'm going to say that result =

71
00:06:51,000 --> 00:06:58,000
String.Equals, and I want to compare name1 and name 2, and there's an optional third parameter here where I

72
00:06:58,000 --> 00:07:03,000
can specify the type of StringComparison to do, and StringComparison is an enum, so if I say

73
00:07:03,000 --> 00:07:08,000
StringComparison., Visual Studio will show me the various StringComparisions I can do.

74
00:07:08,000 --> 00:07:15,000
I can compare strings and take into effect the CurrentCulture, my CurrentCulture is set up for English.

75
00:07:15,000 --> 00:07:19,000
I can also ask for InvariantCulture, so it doesn't matter whether my machine is set up for English,

76
00:07:19,000 --> 00:07:25,000
or Spanish, or French, or Norwegian, and I'm going to select this option, InvariantCultureIgnoreCase.

77
00:07:25,000 --> 00:07:34,000
And I want to assert it IsTrue this result because if I'm ignoring the case when I compare these two strings

78
00:07:34,000 --> 00:07:39,000
I should get a true out, and I now have six passing tests, so that has worked.

79
00:07:39,000 --> 00:07:45,000
Let's press F12 on StringComparison, and go to the metadata view, and here I can see how that enum is defined.

80
00:07:45,000 --> 00:07:52,000
I'm using StringComparison.InvarientCultureIgnoreCase, which holds the value 3, that would actually be the

81
00:07:52,000 --> 00:07:58,000
value that's passed around behind the scenes, but if I try to put a 3 in here you'll notice I do get the red

82
00:07:58,000 --> 00:08:04,000
underline, which indicates there is an error, so even though that underlying value is a 3, I cannot pass the

83
00:08:04,000 --> 00:08:11,000
integer value 3 into this method. The C# complier wants to see something that is one of these StringComparison values.

84
00:08:11,000 --> 00:08:17,000
That's another benefit of using strong typing and using enums instead of just magic numbers.

85
00:08:17,000 --> 00:08:22,000
And speaking of passing parameters to a method, another topic that we want to make that we're comfortable

86
00:08:22,000 --> 00:59:00,000
with is how these different types, these reference types or value types, how they behave when we pass them to another method.

