1
00:00:00,000 --> 00:00:08,000
Let's write some tests to make sure that the GradeBook is computing the proper lowest grade and proper average grade.

2
00:00:08,000 --> 00:00:14,000
To do this, I'm going to make a copy of ComputesHighestGrade by selecting that method, pressing Ctrl+C,

3
00:00:14,000 --> 00:00:19,000
and then Ctrl+V to paste it in. Anytime you do a copy, paste operation in code, you should really take a

4
00:00:19,000 --> 00:00:23,000
step back and make sure that that's the proper approach to solving a problem.

5
00:00:23,000 --> 00:00:27,000
Copy and paste is duplicating code throughout the software, and that's generally something that we try to avoid.

6
00:00:27,000 --> 00:00:33,000
However, inside of a unit test we often allow for duplicate code because it makes the tests a little more

7
00:00:33,000 --> 00:00:37,000
explicit and clear, and that's what I'm going to do here. I'm going to duplicate a lot of code, but I am

8
00:00:37,000 --> 00:00:43,000
also going to change the name of this method because now we're going to check that we compute the lowest grade properly.

9
00:00:43,000 --> 00:00:51,000
I'll still add the same grades to the GradeBook, but now I want to have an assertion that 10 is result.LowestGrade.

10
00:00:51,000 --> 00:01:00,000
Now I can run all tests by going the test menu or by pressing Ctrl+R and then the A key that will run all tests.

11
00:01:00,000 --> 00:01:07,000
And I now have two passing tests. Let me paste a copy of ComputesHighestGrade, which I still have in my

12
00:01:07,000 --> 00:01:13,000
clipboard, only this time we will check to see if we compute the average grade.

13
00:01:13,000 --> 00:01:17,000
And this time I want to add some slightly different data to the GradeBook to make things a little more interesting.

14
00:01:17,000 --> 00:01:27,000
So instead of adding 10 and 90, let's add the same grades that we are adding inside of Program.cs.

15
00:01:27,000 --> 00:01:33,000
So I will take that code and copy and paste it inside of here. Then we can compute the statistics,

16
00:01:33,000 --> 00:01:40,000
and this time I want to check the result.AverageGrade. And if I enter those results into a calculator,

17
00:01:40,000 --> 00:01:47,000
the calculator will tell me that the average of those three numbers is an 85 followed by 1 and then 12 6's,

18
00:01:47,000 --> 00:01:56,000
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, and then a 7. Let me run all the tests again, Ctrl+R and then A,

19
00:01:56,000 --> 00:02:00,000
and I now have a failing test, which will teach us an interesting lesson.

20
00:02:00,000 --> 00:02:09,000
Let me click on that test, and I will see that this 85.16 number is not equal to an 85.16 number that is slightly different.

21
00:02:09,000 --> 00:02:14,000
And the important lesson is that it's very difficult to make assertions about floating point numbers and say

22
00:02:14,000 --> 00:02:20,000
that two numbers are going to be exactly equal because there can always be a little bit of imprecision inside

23
00:02:20,000 --> 00:02:24,000
of the computer because of the way that it represents floating point numbers.

24
00:02:24,000 --> 00:02:29,000
This could be a topic that we could spend a lot of time on, but let me just show you a couple different solutions.

25
00:02:29,000 --> 00:02:33,000
One is you might remember there are two ways to represent a floating point number in C#.

26
00:02:33,000 --> 00:02:38,000
There's the double type and there's the float type. Double is double-precision floating-point, and the float

27
00:02:38,000 --> 00:02:44,000
type is single-precision floating-point. You might remember from an earlier module when I tried to assign a

28
00:02:44,000 --> 00:02:49,000
number like this to a variable of type float the C# compiler wouldn't allow me to do that because by default

29
00:02:49,000 --> 00:02:54,000
a number like this will be treated as a double-precision floating-point number.

30
00:02:54,000 --> 00:02:58,000
And really what's happening here is I'm comparing a double-precision floating-point number to a single-

31
00:02:58,000 --> 00:03:04,000
precision floating-point number, and just like I did in a previous module I could append an f to this literal

32
00:03:04,000 --> 00:03:09,000
number, and now at least the C# compiler will treat that as a single-precision floating-point number and

33
00:03:09,000 --> 00:03:15,000
compare it to another single-precision floating-point number. But more commonly what you want to do is this:

34
00:03:15,000 --> 00:03:20,000
I don't particularly need the GradeBook to store this many digits after the decimal.

35
00:03:20,000 --> 00:03:26,000
Perhaps I really only care about two digits after the decimal. And any time you compare floating-point

36
00:03:26,000 --> 00:03:31,000
numbers or double-precision floating-point numbers inside of a unit test with things like AreEqual,

37
00:03:31,000 --> 00:03:36,000
there's typically an option that allows you to specify are these two numbers close enough?

38
00:03:36,000 --> 00:03:41,000
And you can see in this IntelliSense window when I Assert.AreEqual on types of double or of float,

39
00:03:41,000 --> 00:03:48,000
I would find that inside of here also. I can specify the expected value, what the actual computed value is,

40
00:03:48,000 --> 00:03:53,000
and then a delta, which allows those two numbers to vary by that delta amount.

41
00:03:53,000 --> 00:04:01,000
Let me specify a delta of 0.01 and run these tests. And I'm back to three passing tests, and I now know that

42
00:04:01,000 --> 00:04:06,000
the GradeBook is going to compute the proper average with the right amount of precision that I need for

43
00:04:06,000 --> 00:59:00,000
whatever application that I'm building with this GradeBook.

