1
00:00:01,000 --> 00:00:08,000
The throw keyword in C# is used to raise an exception. An exception is a signal that an error condition

2
00:00:08,000 --> 00:00:13,000
exists, and as the name would imply, an exception should only be raised in exceptional circumstances,

3
00:00:13,000 --> 00:00:18,000
that is, you shouldn't use exceptions to change the normal program flow.

4
00:00:18,000 --> 00:00:22,000
Use exceptions when your software finds itself in a position where it cannot move forward.

5
00:00:22,000 --> 00:00:27,000
Exceptions are what happens when you have a bad input value, or the program is out of memory,

6
00:00:27,000 --> 00:00:32,000
or a network is not available for communication. Those are the types of situations that may require

7
00:00:32,000 --> 00:00:38,000
exceptions, but not always. When you throw an exception, you are throwing an object, this is why we say

8
00:00:38,000 --> 00:00:43,000
exception handling is type safe because every exception with C# is going to be of a known type,

9
00:00:43,000 --> 00:00:48,000
and the compiler can help you handle exceptions. We also say that working with exceptions is structured,

10
00:00:48,000 --> 00:00:53,000
because you can set up blocks of code to handle exceptions, meaning you can structure your program to

11
00:00:53,000 --> 00:00:57,000
anticipate certain exceptions, and try to recover from those error conditions.

12
00:00:57,000 --> 00:01:02,000
The reason we use a throw keyword, is you can picture your software throwing some error object,

13
00:01:02,000 --> 00:01:08,000
and the error object is going to start travelling back through the program until it is either stopped by an

14
00:01:08,000 --> 00:01:12,000
exception handler, which is a piece of code that tries to recover from an exception,

15
00:01:12,000 --> 00:01:17,000
or if there are no exception handlers, we have what we call an unhandled exception.

16
00:01:17,000 --> 00:01:23,000
With .NET an unhandled exception will terminate your program, which sounds terrible, but in reality it's

17
00:01:23,000 --> 00:01:28,000
usually better to shut down a program that has an unhandled error than it is to let the program continue

18
00:01:28,000 --> 00:01:33,000
because the program might be in a bad state after an error occurs, and it could save corrupt data,

19
00:01:33,000 --> 00:01:38,000
it's much better to fail. In this code snippet, we're checking to see if the age value is equal to 21,

20
00:01:38,000 --> 00:01:45,000
and if it is, we'll throw a new ArgumentException. So you can see that an exception object will have a type definition.

21
00:01:45,000 --> 00:01:50,000
In this case ArgumentException is a built-in class in the .NET Framework, and we need to create a new

22
00:01:50,000 --> 00:01:56,000
instance of that ArgumentException, and when we do, the constructor allows us to pass in a description so we

23
00:01:56,000 --> 00:02:01,000
can give some additional information about this error. Now if it is a common occurrence that age could be

24
00:02:01,000 --> 00:02:05,000
equal to 21, it's probably not something that you want to generate an exception for,

25
00:02:05,000 --> 00:02:12,000
exceptions should be for exceptional circumstances. Let's take a look in our program.

26
00:02:12,000 --> 00:02:17,000
Inside of the Grades project, you might remember that we gave the GradeBook a Name property in a previous

27
00:02:17,000 --> 00:02:23,000
module, and then the logic for the setter of that property, we added some validation checks to make sure that

28
00:02:23,000 --> 00:02:29,000
the incoming NewName value was not going to be null or empty. And currently, if a caller tries to set the

29
00:02:29,000 --> 00:02:34,000
name of a GradeBook to something that is null or empty, we silently ignore that assignment.

30
00:02:34,000 --> 00:02:39,000
What I'd like to do now is create an error condition so that if a caller tries to set the name to an invalid

31
00:02:39,000 --> 00:02:44,000
value, we will create an error condition in this program, we'll do that by throwing an exception.

32
00:02:44,000 --> 00:02:49,000
And to do this, I'm going to restructure the setter just a bit, I'm going to remove this if check,

33
00:02:49,000 --> 00:02:56,000
actually I'm going to cut it out with Ctrl+X, and remove the curly braces that made that a block of code,

34
00:02:56,000 --> 00:03:03,000
now I'm going to press Ctrl+K, followed by Ctrl+D, that allows Visual Studio to reformat that code,

35
00:03:03,000 --> 00:03:07,000
and we've removed the indentation that was there, we don't need that indentation any longer.

36
00:03:07,000 --> 00:03:12,000
And now what I want to do is have an if check, but this time I will remove the not operator,

37
00:03:12,000 --> 00:03:18,000
so this time I want to check if string.IsNullOrEmpty, and I can do that just by going right the string

38
00:03:18,000 --> 00:03:24,000
class and invoking the static method, I can also do that through the string keyword that is in C#,

39
00:03:24,000 --> 00:03:29,000
and now if value is null or empty, I want to throw a new exception.

40
00:03:29,000 --> 00:03:34,000
But what exception should I throw? There are many built-in exceptions in the .NET Framework,

41
00:03:34,000 --> 00:03:39,000
you can also create your own custom exception classes. A class that represents an exception that you can

42
00:03:39,000 --> 00:03:43,000
throw, it always ends with the word Exception, that is in the class name.

43
00:03:43,000 --> 00:03:49,000
And you can see if I just start tying Exception, the IntelliSense window will filter things out so I'm only

44
00:03:49,000 --> 00:03:53,000
looking at exception types. And just based on the few namespaces that we have imported right now,

45
00:03:53,000 --> 00:04:00,000
you can see there are many built-in exceptions. These exceptions include everything from a

46
00:04:00,000 --> 00:04:06,000
DirectoryNotFoundException, to a DivideByZeroException, and there's also some built-in argument exceptions,

47
00:04:06,000 --> 00:04:11,000
so there's ArgumentNullException, I could throw this exception if someone passes me an argument and that

48
00:04:11,000 --> 00:04:16,000
argument is null and I cannot work with a null value. There's also a slightly more generic

49
00:04:16,000 --> 00:04:20,000
ArgumentException, which is just a way of saying something is wrong with one of the arguments.

50
00:04:20,000 --> 00:04:26,000
And in the constructor for the particular type of exception, there's an overload of the constructor that

51
00:04:26,000 --> 00:04:32,000
allows me to pass in a more explicit message, so I could say, Name cannot be null or empty.

52
00:04:32,000 --> 00:04:38,000
This would be one way to do it, and let me hit Ctrl+K, Ctrl+D again to do some reformatting of the code,

53
00:04:38,000 --> 00:04:46,000
and let's go back to program.cs, and try to set the book's name to a null value.

54
00:04:46,000 --> 00:04:52,000
So using the null keyword in C#, run the program with Ctrl+F5, and I can see that the program has crashed

55
00:04:52,000 --> 00:04:57,000
with an unhandled exception, a System.ArgumentException, Name cannot be null or empty.

56
00:04:57,000 --> 00:05:03,000
Notice that this error information includes a line of code where this error occurred, and in order for

57
00:05:03,000 --> 00:05:07,000
someone to help track down the error and why this occurred, there's a full stack trace printed.

58
00:05:07,000 --> 00:05:12,000
So what is a stack? As a program is executing and you call a method, that calls another method,

59
00:05:12,000 --> 00:05:17,000
that calls another method, there's a data structure being built internally that we call a stack,

60
00:05:17,000 --> 00:05:21,000
and with each method that you call, something is pushed onto the stack.

61
00:05:21,000 --> 00:05:25,000
You can imagine almost like a stack of papers on someone's desk, every time we call a method,

62
00:05:25,000 --> 00:05:31,000
we write the method name down on a piece of paper, and add it to that stack, and every time a method finishes

63
00:05:31,000 --> 00:05:36,000
executing and it returns, we pull a piece of paper off the stack and we can look at that next sheet and know

64
00:05:36,000 --> 00:05:40,000
what method we came from, who was the caller, and go back there.

65
00:05:40,000 --> 00:05:46,000
A stack trace is showing you how execution arrived at this point in code where the unhandled error occurred.

66
00:05:46,000 --> 00:05:52,000
And it's telling us that the exception was thrown from line 53 of GradeBook.cs, but that's not really helpful

67
00:05:52,000 --> 00:05:57,000
when you're trying to track down a problem. What's really helpful is usually something further up the stack,

68
00:05:57,000 --> 00:06:05,000
and what's further up the stack is Program.cs line 14, and if I close the program and go to line 14,

69
00:06:05,000 --> 00:06:10,000
I am on the line of code that is really responsible for creating this error condition because this is the

70
00:06:10,000 --> 00:06:16,000
line of code that passed an illegal value. Reading the stack traces that come out in an error message can

71
00:06:16,000 --> 00:06:22,000
quite often help you try to locate the piece of code that started all the problems and led to an unhandled error.

72
00:06:22,000 --> 00:06:28,000
So now we've seen that an unhandled exception can terminate an application, but let's look at the other side

73
00:06:28,000 --> 00:59:00,000
of exceptions now and see how they can handle an exception, and prevent a program from crashing.

